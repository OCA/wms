# Copyright 2023 ACSONE SA/NV
# Copyright 2024 Camptocamp
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

from odoo import api, fields, models


class SaleOrder(models.Model):
    _inherit = "sale.order"

    block_release = fields.Boolean(
        default=False,
        readonly=True,
        states={"draft": [("readonly", False)]},
        help="Block the release of the generated delivery at order confirmation.",
    )
    available_move_to_unblock_ids = fields.One2many(
        comodel_name="stock.move",
        compute="_compute_available_move_to_unblock_ids",
        string="Available moves to unblock",
        help="Available moves to unblock for this order.",
    )
    available_move_to_unblock_count = fields.Integer(
        compute="_compute_available_move_to_unblock_ids"
    )
    move_to_unblock_ids = fields.One2many(
        comodel_name="stock.move",
        inverse_name="unblocked_by_order_id",
        string="Moves To Unblock",
        readonly=True,
        help="Moves to unblock when the current order is confirmed.",
    )
    move_to_unblock_count = fields.Integer(compute="_compute_move_to_unblock_count")

    def _domain_available_move_to_unblock(self):
        self.ensure_one()
        # Returns domain for moves:
        #   - of type delivery
        #   - sharing the same shipping address
        #   - not yet release and blocked
        return [
            ("picking_type_id.code", "=", "outgoing"),
            ("partner_id", "=", self.partner_shipping_id.id),
            ("state", "=", "waiting"),
            ("need_release", "=", True),
            ("release_blocked", "=", True),
            ("unblocked_by_order_id", "!=", self.id),
        ]

    @api.depends("order_line.move_ids")
    def _compute_available_move_to_unblock_ids(self):
        for order in self:
            moves = self.env["stock.move"].search(
                order._domain_available_move_to_unblock()
            )
            self.available_move_to_unblock_ids = moves
            self.available_move_to_unblock_count = len(moves)

    @api.depends("move_to_unblock_ids")
    def _compute_move_to_unblock_count(self):
        for order in self:
            order.move_to_unblock_count = len(order.move_to_unblock_ids)

    def action_open_move_need_release(self):
        action = super().action_open_move_need_release()
        if not action.get("context"):
            action["context"] = {}
        action["context"].update(from_sale_order_id=self.id)
        return action

    def action_open_available_move_to_unblock(self):
        self.ensure_one()
        if not self.available_move_to_unblock_count:
            return
        xmlid = "stock_available_to_promise_release.stock_move_release_action"
        action = self.env["ir.actions.act_window"]._for_xml_id(xmlid)
        action["domain"] = [("id", "in", self.available_move_to_unblock_ids.ids)]
        action["context"] = {"from_sale_order_id": self.id}
        return action

    def action_open_move_to_unblock(self):
        self.ensure_one()
        if not self.move_to_unblock_count:
            return
        xmlid = "stock_available_to_promise_release.stock_move_release_action"
        action = self.env["ir.actions.act_window"]._for_xml_id(xmlid)
        action["domain"] = [("id", "in", self.move_to_unblock_ids.ids)]
        action["context"] = {}
        return action

    def action_confirm(self):
        # Reschedule the blocked moves when confirming the order
        # NOTE: If a module like 'stock_picking_group_by_partner_by_carrier_by_date'
        # is installed, these moves + the new ones generated by the current order
        # will all be grouped in the same delivery order as soon as they share
        # the same grouping criteria (partner, date, carrier...).
        for order in self:
            if order.move_to_unblock_ids:
                date_deadline = order.commitment_date or order.expected_date
                self.env["unblock.release"]._reschedule_moves(
                    order.move_to_unblock_ids, date_deadline, from_order=order
                )
                # Unblock the release
                if not order.block_release:
                    order.move_to_unblock_ids.action_unblock_release()
        return super().action_confirm()
